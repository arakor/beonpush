package core;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import org.slf4j.Logger;
import org.slf4j.impl.SimpleLoggerFactory;

import core.TestData.Pack.PackType;

public class TestData {

	public static class Account {

		String accountName;
		List<Pack> activePackages = new ArrayList<TestData.Pack>();

		public Account(String accountName) {
			LOG.info("New Account was created: " + accountName);
			this.accountName = accountName;
		}

		public void buyPackage(PackType packType) {
			Pack pack = new Pack(packType.getPackValue(), new Date());
			LOG.info("Account '" + accountName + "' bought a new Package: "
					+ packType + "\n" + pack);
			activePackages.add(pack);
		}

		public void clearAccount() {
			for (int i = activePackages.size() - 1; i >= 0; i--) {
				Pack p = activePackages.get(i);
				if (!p.active) {
					activePackages.remove(p);
				}
			}
		}

	}

	public static class Beonpush implements Runnable {

		private final List<Account> accounts;
		private Thread t;
		private final String threadName;

		public Beonpush(String name, List<Account> accounts) {
			this.accounts = accounts;
			threadName = name;
			LOG.info("'Beonpush' was created");
		}

		public void clearBeonpush() {
			for (int i = accounts.size() - 1; i >= 0; i--) {
				Account a = accounts.get(i);
				if (a.activePackages.isEmpty()) {
					accounts.remove(a);
				}
			}
		}

		public void run() {
			LOG.info("Thread " + threadName + " starting.");
			try {
				double interest;

				int c = 1;
				while (!accounts.isEmpty()) {
					interest = Math.round((Math.random() + 1) * 100.0) / 10000.0;
					for (Account a : accounts) {
						for (Pack p : a.activePackages) {
							p.calc(interest);
							LOG.info("interest '" + interest + "%' on day " + c
									+ " | " + p);
						}
						a.clearAccount();
					}
					clearBeonpush();
					c++;
					Thread.sleep(250);
				}
			} catch (InterruptedException e) {
				LOG.error("Thread " + threadName + " interrupted.");
			}
			LOG.info("Thread " + threadName + " exiting.");
		}

		public void start() {
			if (t == null) {
				t = new Thread(this, threadName);
				t.start();
			}
		}

	}

	public static class Pack {
		enum PackType {
			ZWANZIG;
			public int getPackValue() {
				return 20;
			}
		}

		boolean active = true;
		long dayOfPurchase;
		private final double packageMultiplier = 1.5;
		int packValue;
		double realizedRevenue;
		double targetValue;

		public Pack(int packValue, Date dayOfPurchase) {
			this.packValue = packValue;
			this.dayOfPurchase = dayOfPurchase.getTime();
			targetValue = packValue * packageMultiplier;
		}

		public void calc(double interest) {
			realizedRevenue = Math.round((realizedRevenue + packValue
					* interest) * 100.0) / 100.0;
			if (realizedRevenue >= targetValue) {
				active = false;
			}
		}

		public boolean isActive() {
			return active;
		}

		@Override
		public String toString() {
			return "Pack [active=" + active + ", packValue=" + packValue
					+ ", realizedRevenue=" + realizedRevenue + ", targetValue="
					+ targetValue + "]";
		}

	}

	static Logger LOG = new SimpleLoggerFactory().getLogger("BEON");

	public static void main(String[] args) {
		ArrayList<Account> accounts = new ArrayList<TestData.Account>();
		Account tharmar = new Account("Tharmar");
		accounts.add(tharmar);

		tharmar.buyPackage(PackType.ZWANZIG);

		Beonpush core = new Beonpush("Europe", accounts);
		core.start();
	}
}
